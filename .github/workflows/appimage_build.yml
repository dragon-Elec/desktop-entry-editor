name: Build AppImage

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - master # Adjust if your main branch is 'master'

# Define a single job named 'build'
jobs:
  build:
    name: Build AppImage
    # Run on the latest Ubuntu Linux runner
    runs-on: ubuntu-latest

    # Steps to execute within the job
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Install build dependencies via apt
      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            automake \
            autoconf \
            intltool \
            pkg-config \
            gettext \
            libglib2.0-dev \
            libgtk-3-dev \
            libgtksourceview-3.0-dev \
            python3 \
            python3-pip \
            python3-gi \
            python3-gi-cairo \
            python3-xdg \
            fuse

      # Download linuxdeploy and its GTK plugin
      - name: Download linuxdeploy and plugins
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gtk/master/linuxdeploy-plugin-gtk.sh
          chmod +x linuxdeploy-x86_64.AppImage linuxdeploy-plugin-gtk.sh
          sudo modprobe fuse || echo "fuse module already loaded or unavailable"
          mkdir -p $HOME/.cache/linuxdeploy

      # Create the m4 directory if it doesn't exist
      - name: Create m4 directory
        run: mkdir -p m4

      # Prepare build system (run autoreconf)
      - name: Prepare build system
        run: |
          autoreconf --force --install --verbose

      # Configure and Build
      - name: Configure and Build
        run: |
          ./configure --prefix=/usr
          make

      # Create the AppDir structure and install
      - name: Create AppDir and install
        run: |
          mkdir -p AppDir
          make install DESTDIR=$(pwd)/AppDir

      # Setup AppDir metadata (Fix categories, ensure icon, use printf fallback)
      - name: Setup AppDir metadata
        run: |
          DESKTOP_FILE="AppDir/usr/share/applications/desktop-entry-editor.desktop"
          ICON_SOURCE="data/icons/desktop-entry-editor.svg" # Adjust if your icon path is different
          ICON_DEST_DIR="AppDir/usr/share/icons/hicolor/scalable/apps"
          ICON_DEST_FILE="$ICON_DEST_DIR/desktop-entry-editor.svg"

          # Check if the installed desktop file exists
          if [ -f "$DESKTOP_FILE" ]; then
            echo "Desktop file found at '$DESKTOP_FILE'. Checking categories..."
            # Use sed to fix the category if it's the wrong one (Workaround)
            # Consider fixing this in your source repo's .desktop file instead!
            sed -i 's/Categories=Accessories;/Categories=Utility;/g' "$DESKTOP_FILE"
            echo "Ensured 'Categories=Utility;' in existing file."
          else
            # Fallback: Create a basic desktop file using printf (safer than here-doc)
            echo "Desktop file not found at '$DESKTOP_FILE'! Creating a basic one..."
            mkdir -p "$(dirname "$DESKTOP_FILE")"
            printf "%s\n" \
              "[Desktop Entry]" \
              "Type=Application" \
              "Name=Desktop Entry Editor" \
              "Exec=desktop-entry-editor" \
              "Icon=desktop-entry-editor" \
              "Categories=Utility;" \
              > "$DESKTOP_FILE" # Use valid Utility category
            echo "Created basic $DESKTOP_FILE"
          fi

          # Ensure icon exists, copy if needed
          if [ ! -f "$ICON_DEST_FILE" ]; then
             if [ -f "$ICON_SOURCE" ]; then
               echo "Icon not found in AppDir, copying from '$ICON_SOURCE'..."
               mkdir -p "$ICON_DEST_DIR"
               cp "$ICON_SOURCE" "$ICON_DEST_FILE"
               echo "Copied '$ICON_SOURCE' to '$ICON_DEST_FILE'"
             else
               echo "Warning: Source icon not found at '$ICON_SOURCE'. AppImage icon might be missing."
             fi
          else
             echo "Icon already exists: $ICON_DEST_FILE"
          fi

          # Debugging: Print final desktop file content
          echo "--- Final contents of $DESKTOP_FILE ---"
          cat "$DESKTOP_FILE"
          echo "--- End of $DESKTOP_FILE ---"


      # Create the AppImage using linuxdeploy
      - name: Create AppImage
        run: |
          export DEPLOY_GTK_VERSION=3
          ./linuxdeploy-x86_64.AppImage \
            --appdir AppDir \
            --plugin gtk \
            --output appimage \
            --desktop-file "$DESKTOP_FILE" # Use the variable for consistency

      # Upload the generated AppImage artifact
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: desktop-entry-editor-AppImage
          path: ./*-x86_64.AppImage # Match linuxdeploy output pattern
