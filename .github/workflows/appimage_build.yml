name: Build AppImage

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main # Changed from 'master' - adjust if your main branch is different

# Define a single job named 'build'
jobs:
  build:
    name: Build AppImage
    # Run on the latest Ubuntu Linux runner
    runs-on: ubuntu-latest

    # Steps to execute within the job
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Install build dependencies via apt
      - name: Install build dependencies
        run: |
          # Update package list
          sudo apt update
          # Install essential build tools, libraries, and Python dependencies
          sudo apt install -y \
            build-essential \
            automake \
            autoconf \
            intltool \
            pkg-config \
            gettext \
            libglib2.0-dev \
            libgtk-3-dev \
            libgtksourceview-3.0-dev \
            python3 \
            python3-pip \
            python3-gi \
            python3-gi-cairo \
            python3-xdg \
            fuse   # Required for AppImage execution

      # Download linuxdeploy and its GTK plugin
      - name: Download linuxdeploy and plugins
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gtk/master/linuxdeploy-plugin-gtk.sh
          chmod +x linuxdeploy-x86_64.AppImage linuxdeploy-plugin-gtk.sh
          # Make AppImage executable in CI environment
          # Note: This might not be strictly necessary for linuxdeploy itself, but good practice if running other AppImages
          sudo modprobe fuse || echo "fuse module already loaded or unavailable"
          mkdir -p $HOME/.cache/linuxdeploy

      # Create the m4 directory if it doesn't exist (Autotools best practice)
      - name: Create m4 directory
        run: mkdir -p m4

      # Prepare build system (run autoreconf) - good practice for Autotools in CI
      - name: Prepare build system
        run: |
          # Ensure the environment finds the .m4 files installed by dev packages
          autoreconf --force --install --verbose

      # Run the standard Autotools configuration and build steps
      - name: Configure and Build
        run: |
          # Run autotools sequence - simplified since autoreconf already ran
          # These might be redundant if autoreconf worked fully, but harmless
          # intltoolize --force --copy --automake
          # automake --add-missing --copy

          # Configure the build, install to /usr within the AppDir
          ./configure --prefix=/usr

          # Compile the application
          make

      # Create the AppDir structure and install the built application into it
      - name: Create AppDir and install
        run: |
          mkdir -p AppDir
          # Install using the DESTDIR variable to place files in the AppDir
          make install DESTDIR=$(pwd)/AppDir

      # Ensure desktop file and icon are correctly set up (CORRECTED SECTION)
      - name: Setup AppDir metadata
        run: |
          DESKTOP_FILE="AppDir/usr/share/applications/desktop-entry-editor.desktop"
          ICON_SOURCE="data/icons/desktop-entry-editor.svg" # Assuming this path is correct relative to repo root
          ICON_DEST_DIR="AppDir/usr/share/icons/hicolor/scalable/apps"
          ICON_DEST_FILE="$ICON_DEST_DIR/desktop-entry-editor.svg"

          # Create the desktop file if it doesn't exist
          if [ ! -f "$DESKTOP_FILE" ]; then
            echo "Desktop file not found at '$DESKTOP_FILE'! Creating a basic one..."
            mkdir -p "$(dirname "$DESKTOP_FILE")"
            # Use printf to create the file content safely, avoiding here-doc issues
            printf "%s\n" \
              "[Desktop Entry]" \
              "Type=Application" \
              "Name=Desktop Entry Editor" \
              "Exec=desktop-entry-editor" \
              "Icon=desktop-entry-editor" \
              "Categories=Utility;" \
              > "$DESKTOP_FILE"
            echo "Created basic $DESKTOP_FILE"
          else
            echo "Desktop file already exists: $DESKTOP_FILE"
          fi

          # Make sure there's an icon, copy if needed
          if [ ! -f "$ICON_DEST_FILE" ]; then
             if [ -f "$ICON_SOURCE" ]; then
               echo "Icon not found in AppDir, copying from '$ICON_SOURCE'..."
               mkdir -p "$ICON_DEST_DIR"
               cp "$ICON_SOURCE" "$ICON_DEST_FILE"
               echo "Copied '$ICON_SOURCE' to '$ICON_DEST_FILE'"
             else
               echo "Warning: Source icon not found at '$ICON_SOURCE'. AppImage icon might be missing."
             fi
          else
             echo "Icon already exists: $ICON_DEST_FILE"
          fi

      # Bundle dependencies and create the AppImage using linuxdeploy
      - name: Create AppImage
        run: |
          # Set environment variable for linuxdeploy-plugin-gtk
          export DEPLOY_GTK_VERSION=3

          # Run linuxdeploy with the gtk plugin
          ./linuxdeploy-x86_64.AppImage \
            --appdir AppDir \
            --plugin gtk \
            --output appimage \
            --desktop-file AppDir/usr/share/applications/desktop-entry-editor.desktop # Explicitly point to desktop file

      # Upload the generated AppImage as a workflow artifact
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: desktop-entry-editor-AppImage # Name of the artifact
          path: ./*-x86_64.AppImage # More specific path matching linuxdeploy output pattern
