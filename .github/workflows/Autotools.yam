# .github/workflows/build-appimage.yml

name: Build AppImage

on:
  push:
    branches: [ "main" ] # Adjust branch name if needed
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    # Use a specific LTS runner for better consistency and compatibility
    runs-on: ubuntu-22.04

    steps:
      #----------------------------------------------
      # Checkout Code
      #----------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      #----------------------------------------------
      # Install Build & Runtime Dependencies (using apt)
      #----------------------------------------------
      - name: Install System Dependencies
        run: |
          sudo apt-get update -q
          # Install build tools for Autotools
          # Install Python, pip, AND pre-built PyGObject/XDG bindings + GTK libs/dev headers
          # This avoids pip compilation issues and complex pkg-config setups
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            autoconf \
            automake \
            libtool \
            pkg-config \
            intltool \
            gettext \
            python3 \
            python3-pip \
            python3-gi \
            python3-gi-cairo \
            gir1.2-gtk-3.0 \
            gir1.2-gtksource-3.0 \
            python3-xdg \
            libgtk-3-dev \
            libgtksourceview-3.0-dev \
            libglib2.0-dev \
            wget

      #----------------------------------------------
      # Download AppImage Tools
      #----------------------------------------------
      - name: Download linuxdeploy and plugins
        run: |
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage" -O linuxdeploy
          # We need BOTH Python and GTK plugins
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy-plugin-python/releases/download/continuous/linuxdeploy-plugin-python-x86_64.AppImage" -O linuxdeploy-plugin-python
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy-plugin-gtk/releases/download/continuous/linuxdeploy-plugin-gtk-x86_64.AppImage" -O linuxdeploy-plugin-gtk
          chmod +x linuxdeploy linuxdeploy-plugin-python linuxdeploy-plugin-gtk

      #----------------------------------------------
      # Build Desktop Entry Editor (Autotools)
      #----------------------------------------------
      - name: Prepare Autotools (autoreconf)
        run: |
          # Regenerate build system files - standard practice when building from git
          aclocal -I m4
          intltoolize --force --copy
          autoconf
          automake --add-missing --copy --force-missing

      - name: Configure Build
        run: |
          # Install into /usr within the AppDir for standard paths
          # Autotools should find the system python3 installed via apt
          ./configure --prefix=/usr

      - name: Make Build
        run: make

      #----------------------------------------------
      # Prepare AppDir (Stage Installation)
      #----------------------------------------------
      - name: Create AppDir and Install
        run: |
          # Use make install with DESTDIR to stage the installation
          make install DESTDIR=AppDir

      #----------------------------------------------
      # Bundle Dependencies into AppDir
      #----------------------------------------------
      - name: Bundle Python Environment using Plugin
        env:
          APPDIR: ${{ github.workspace }}/AppDir
        run: |
          # This plugin automatically finds the system Python3, copies it,
          # finds required modules (dee, xdg, gi), and bundles them correctly.
          echo "Running linuxdeploy-plugin-python..."
          ./linuxdeploy-plugin-python --appdir $APPDIR

      - name: Compile GSettings Schema
        run: |
          # Compile schemas within the AppDir structure
          SCHEMA_DIR="AppDir/usr/share/glib-2.0/schemas"
          if [ -d "$SCHEMA_DIR" ]; then
             echo "Compiling GSettings schemas in $SCHEMA_DIR..."
             glib-compile-schemas "$SCHEMA_DIR/"
          else
             echo "Warning: GSettings schema directory not found at $SCHEMA_DIR. Skipping compilation."
          fi

      #----------------------------------------------
      # Create Final AppImage using linuxdeploy
      #----------------------------------------------
      - name: Determine AppImage Version
        id: version
        run: |
          # Use release tag name if triggered by release, otherwise use short commit hash
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "APP_VERSION=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "APP_VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi
          echo "AppImage Version set to: ${{ steps.version.outputs.APP_VERSION }}"

      - name: Run linuxdeploy (Bundle libs & Create AppImage)
        env:
          APPDIR: ${{ github.workspace }}/AppDir
          VERSION: ${{ steps.version.outputs.APP_VERSION }} # Pass version to linuxdeploy
          # DEPLOY_GTK_VERSION=3 # GTK plugin usually detects this, but can be explicit
        run: |
          echo "Running linuxdeploy..."
          # Use relative paths from AppDir root for linuxdeploy arguments
          ./linuxdeploy --appdir $APPDIR \
            --executable usr/bin/desktop-entry-editor \
            --desktop-file usr/share/applications/desktop-entry-editor.desktop \
            --icon-file usr/share/icons/hicolor/scalable/apps/desktop-entry-editor.svg \
            --plugin gtk \
            --output appimage # Create the final AppImage file

      #----------------------------------------------
      # Upload Artifacts
      #----------------------------------------------
      - name: Prepare Artifact Name and Verify Creation
        id: artifact_info
        run: |
          ARTIFACT_FILENAME="Desktop-Entry-Editor-${{ steps.version.outputs.APP_VERSION }}-x86_64.AppImage"
          echo "Expected artifact filename: $ARTIFACT_FILENAME"

          # Use find to locate the generated AppImage (linuxdeploy might slightly alter name)
          # Look in the current directory (where linuxdeploy outputs)
          GENERATED_APPIMAGE=$(find . -maxdepth 1 -name 'Desktop*.AppImage' -print -quit)

          if [[ -z "$GENERATED_APPIMAGE" ]]; then
            echo "::error::AppImage file not found after linuxdeploy run!"
            ls -lA . # List current directory contents for debugging
            exit 1
          else
            echo "Found generated AppImage: $GENERATED_APPIMAGE"
            # Rename to the consistent name for upload
            mv "$GENERATED_APPIMAGE" "$ARTIFACT_FILENAME"
            echo "Renamed to: $ARTIFACT_FILENAME"
            echo "FILENAME=$ARTIFACT_FILENAME" >> $GITHUB_OUTPUT
          fi

      - name: Upload AppImage as Build Artifact
        uses: actions/upload-artifact@v4 # Use v4 for latest features/fixes
        with:
          name: Desktop-Entry-Editor-AppImage
          path: ${{ steps.artifact_info.outputs.FILENAME }} # Use the output path

      #----------------------------------------------
      # Upload to Release (Conditional)
      #----------------------------------------------
      - name: Upload AppImage to Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.artifact_info.outputs.FILENAME }} # Use the output path
          asset_name: ${{ steps.artifact_info.outputs.FILENAME }}
          asset_content_type: application/vnd.appimage
