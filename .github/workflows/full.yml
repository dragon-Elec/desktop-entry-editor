# .github/workflows/build-appimage.yml

name: Build AppImage

on:
  push:
    branches: [ "main" ]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # --- Checkout Code ---
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Install Dependencies ---
      - name: Install Dependencies (including libfuse2)
        run: |
          sudo apt-get update -q
          sudo apt-get install -y --no-install-recommends \
            git build-essential autoconf automake libtool pkg-config \
            intltool gettext python3 python3-pip python3-gi \
            python3-gi-cairo gir1.2-gtk-3.0 gir1.2-gtksource-3.0 \
            python3-xdg libgtk-3-dev libgtksourceview-3.0-dev \
            libglib2.0-dev wget libfuse2 desktop-file-utils # Keep desktop-file-utils just in case

      # --- Download Core AppImage Tools ---
      - name: Install Core AppImage Tools (linuxdeploy + python plugin)
        run: |
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage" -O linuxdeploy
          wget -c -nv "https://github.com/niess/linuxdeploy-plugin-python/releases/download/continuous/linuxdeploy-plugin-python-x86_64.AppImage" -O linuxdeploy-plugin-python
          chmod +x linuxdeploy linuxdeploy-plugin-python

      # --- Build Desktop Entry Editor ---
      - name: Prepare Autotools
        run: |
          aclocal -I m4
          intltoolize --force --copy
          autoconf
          automake --add-missing --copy --force-missing -v
      - name: Configure Build
        run: |
          ./configure --prefix=/usr
      - name: Make Build
        run: |
          make V=1

      # --- VERIFY BUILD OUTPUTS ---
      - name: Verify Files Before Install
        run: |
          echo "--- Checking for files generated by 'make' ---"
          ls -l src/desktop-entry-editor || echo "::error::Executable script 'src/desktop-entry-editor' not found after make!"
          ls -l data/apps.desktop-entry-editor.gschema.xml || echo "::error::Schema 'data/apps.desktop-entry-editor.gschema.xml' not found!"
          ls -l data/desktop-entry-editor.desktop || echo "::error::Desktop file 'data/desktop-entry-editor.desktop' not found!"
          # Add check for python module init file
          ls -l src/dee/__init__.py || echo "::error::Python module __init__.py 'src/dee/__init__.py' not found!"
          # Add check for icon file
          ls -l data/icons/hicolor/scalable/apps/desktop-entry-editor.svg || echo "::error::Icon file 'data/icons/hicolor/scalable/apps/desktop-entry-editor.svg' not found!"


          # If any critical file is missing, fail early
          if ! [ -f src/desktop-entry-editor ] || \
             ! [ -f data/apps.desktop-entry-editor.gschema.xml ] || \
             ! [ -f data/desktop-entry-editor.desktop ] || \
             ! [ -f src/dee/__init__.py ] || \
             ! [ -f data/icons/hicolor/scalable/apps/desktop-entry-editor.svg ]; then
             echo "::error::One or more required files were not generated by 'make'. Cannot proceed to install."
             exit 1
          fi
          echo "Required files found."

      # --- Prepare AppDir and TEST Manual Install ---  <- TEMPORARY TEST STEP
      - name: TEST Manual Create AppDir and Install
        run: |
          echo "Creating AppDir structure manually..."
          # Manually create the target directories
          mkdir -pv AppDir/usr/bin # Added -v for verbose mkdir
          mkdir -pv AppDir/usr/share/applications
          mkdir -pv AppDir/usr/share/glib-2.0/schemas
          mkdir -pv AppDir/usr/share/icons/hicolor/scalable/apps
          # Make sure python path matches expectation (check python --version if unsure)
          mkdir -pv AppDir/usr/lib/python3.10/site-packages/dee # Using python3.10 based on previous logs

          echo "Manually installing key files..."
          # Manually install the executable (use 755 permissions)
          install -v -c -m 755 src/desktop-entry-editor AppDir/usr/bin/ || echo "::error::Manual install of executable failed!"

          # Manually install the desktop file
          install -v -c -m 644 data/desktop-entry-editor.desktop AppDir/usr/share/applications/ || echo "::error::Manual install of desktop file failed!"

          # Manually install the schema
          install -v -c -m 644 data/apps.desktop-entry-editor.gschema.xml AppDir/usr/share/glib-2.0/schemas/ || echo "::error::Manual install of schema failed!"

          # Manually install the main icon
          install -v -c -m 644 data/icons/hicolor/scalable/apps/desktop-entry-editor.svg AppDir/usr/share/icons/hicolor/scalable/apps/ || echo "::error::Manual install of icon failed!"

          # Manually install the __init__.py (adjust source path if needed - assuming it's src/dee/)
          install -v -c -m 644 src/dee/__init__.py AppDir/usr/lib/python3.10/site-packages/dee/ || echo "::error::Manual install of python module __init__.py failed!"
          # Add other essential python files from src/dee if needed
          # install -v -c -m 644 src/dee/application.py AppDir/usr/lib/python3.10/site-packages/dee/ || echo "::error::Manual install of python module application.py failed!"
          # install -v -c -m 644 src/dee/entry.py AppDir/usr/lib/python3.10/site-packages/dee/ || echo "::error::Manual install of python module entry.py failed!"
          # ... etc for other .py files in src/dee ...

          echo "--- Verifying contents after MANUAL install ---"
          echo "Listing full AppDir structure:"
          find AppDir -ls # Use find for a recursive view
          echo "Checking specifically for executable:"
          ls -l AppDir/usr/bin/desktop-entry-editor || echo "::error::Executable missing after MANUAL install!"
          echo "Checking specifically for schema:"
          ls -l AppDir/usr/share/glib-2.0/schemas/apps.desktop-entry-editor.gschema.xml || echo "::error::Schema missing after MANUAL install!"

          # Final check
          if ! [ -f AppDir/usr/bin/desktop-entry-editor ]; then
              echo "::error::Executable verification failed after MANUAL install. Aborting."
              exit 1
          fi
          echo "Manual install verification successful."

      # --- Bundle Dependencies ---
      - name: Bundle Python Environment
        env:
          APPDIR: ${{ github.workspace }}/AppDir
        run: |
          # Need to ensure the manual install created the python module path
          if [ -d "$APPDIR/usr/lib/python3.10/site-packages/dee" ]; then
            echo "Python module directory exists. Running linuxdeploy-plugin-python..."
            ./linuxdeploy-plugin-python --appdir $APPDIR
          else
            echo "::error::Python module directory '$APPDIR/usr/lib/python3.10/site-packages/dee' not found after manual install. Cannot run python plugin."
            exit 1
          fi


      - name: Compile GSettings Schema
        run: |
          SCHEMA_DIR="AppDir/usr/share/glib-2.0/schemas"
          if [ -f "$SCHEMA_DIR/apps.desktop-entry-editor.gschema.xml" ]; then
             echo "Compiling GSettings schemas in $SCHEMA_DIR..."
             # Ensure the directory exists before compiling (should exist from manual install)
             mkdir -p "$SCHEMA_DIR"
             if command -v glib-compile-schemas &> /dev/null; then
               glib-compile-schemas "$SCHEMA_DIR/"
               echo "Schema compilation command executed."
             else
               echo "::warning::glib-compile-schemas command not found on host. Cannot compile schemas at this stage."
             fi
          else
             # This should now only trigger if the manual install failed
             echo "::error::GSettings schema file NOT FOUND at $SCHEMA_DIR/apps.desktop-entry-editor.gschema.xml after manual install. Cannot compile."
             exit 1
          fi

      # --- Create AppImage ---
      - name: Determine AppImage Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "APP_VERSION=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "APP_VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi
          echo "AppImage Version set to: ${{ steps.version.outputs.APP_VERSION }}"

      - name: Bundle Libraries and Create AppImage (using GTK script plugin)
        env:
          APPDIR: ${{ github.workspace }}/AppDir
          VERSION: ${{ steps.version.outputs.APP_VERSION }}
          # Explicitly tell linuxdeploy where the desktop and icon files are relative to AppDir root
          DESKTOP_FILE: usr/share/applications/desktop-entry-editor.desktop
          ICON_FILE: usr/share/icons/hicolor/scalable/apps/desktop-entry-editor.svg
          # Add python version if linuxdeploy needs it (sometimes helps)
          # PYTHON_VERSION: 3.10
        run: |
          echo "Downloading linuxdeploy-plugin-gtk script..."
          wget -c -nv "https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gtk/master/linuxdeploy-plugin-gtk.sh" -O linuxdeploy-plugin-gtk
          chmod +x linuxdeploy-plugin-gtk
          echo "Running linuxdeploy with plugins..."
          # Ensure desktop file and icon file exist before running linuxdeploy
          if ! [ -f "$APPDIR/$DESKTOP_FILE" ]; then
            echo "::error::Desktop file missing at $APPDIR/$DESKTOP_FILE before running linuxdeploy!"
            find AppDir -name "*.desktop" -ls # Show where desktop files might be
            exit 1
          fi
          if ! [ -f "$APPDIR/$ICON_FILE" ]; then
            echo "::error::Icon file missing at $APPDIR/$ICON_FILE before running linuxdeploy!"
            find AppDir -name "*.svg" -ls # Show where svg files might be
            exit 1
          fi
          # Ensure executable exists
          if ! [ -f "$APPDIR/usr/bin/desktop-entry-editor" ]; then
            echo "::error::Executable file missing at $APPDIR/usr/bin/desktop-entry-editor before running linuxdeploy!"
            exit 1
          fi


          ./linuxdeploy --appdir $APPDIR \
            --executable usr/bin/desktop-entry-editor \
            --desktop-file "$DESKTOP_FILE" \
            --icon-file "$ICON_FILE" \
            --plugin gtk \
            --output appimage

      # --- Upload Artifacts ---
      - name: Prepare Artifact Name
        id: artifact_info
        run: |
          ARTIFACT_FILENAME="Desktop-Entry-Editor-${{ steps.version.outputs.APP_VERSION }}-x86_64.AppImage"
          echo "FILENAME=$ARTIFACT_FILENAME" >> $GITHUB_OUTPUT
          GENERATED_APPIMAGE=$(find . -maxdepth 1 -name 'Desktop*.AppImage' -print -quit)
          if [[ -z "$GENERATED_APPIMAGE" ]]; then
            echo "::error::Could not find generated AppImage file after linuxdeploy!"
            exit 1
          fi
          echo "Found generated AppImage: $GENERATED_APPIMAGE"
          mv "$GENERATED_APPIMAGE" "$ARTIFACT_FILENAME"
          echo "Renamed to: $ARTIFACT_FILENAME"

      - name: Upload AppImage as Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Desktop-Entry-Editor-AppImage
          path: ${{ steps.artifact_info.outputs.FILENAME }}

      # --- Upload to Release ---
      - name: Upload AppImage to Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.artifact_info.outputs.FILENAME }}
          asset_name: ${{ steps.artifact_info.outputs.FILENAME }}
          asset_content_type: application/vnd.appimage
