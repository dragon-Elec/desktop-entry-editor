# .github/workflows/build-appimage.yml

name: Build AppImage

on:
  push:
    branches: [ "main" ]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # --- Checkout Code ---
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Install Dependencies ---
      - name: Install Dependencies (including libfuse2)
        run: |
          sudo apt-get update -q
          sudo apt-get install -y --no-install-recommends \
            git build-essential autoconf automake libtool pkg-config \
            intltool gettext python3 python3-pip python3-gi \
            python3-gi-cairo gir1.2-gtk-3.0 gir1.2-gtksource-3.0 \
            python3-xdg libgtk-3-dev libgtksourceview-3.0-dev \
            libglib2.0-dev wget libfuse2 desktop-file-utils # Keep desktop-file-utils just in case

      # --- Download Core AppImage Tools ---
      - name: Install Core AppImage Tools (linuxdeploy + python plugin)
        run: |
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage" -O linuxdeploy
          wget -c -nv "https://github.com/niess/linuxdeploy-plugin-python/releases/download/continuous/linuxdeploy-plugin-python-x86_64.AppImage" -O linuxdeploy-plugin-python
          chmod +x linuxdeploy linuxdeploy-plugin-python

      # --- Build Desktop Entry Editor ---
      - name: Prepare Autotools
        run: |
          aclocal -I m4
          intltoolize --force --copy
          autoconf
          automake --add-missing --copy --force-missing -v
      - name: Configure Build
        run: |
          ./configure --prefix=/usr
      - name: Make Build
        run: |
          make V=1

      # --- VERIFY BUILD OUTPUTS ---
      - name: Verify Build Output Files
        run: |
          echo "--- Checking for files generated by 'make' in build directories ---"
          ls -l src/desktop-entry-editor || { echo "::error::Executable script 'src/desktop-entry-editor' not found after make!"; exit 1; }
          ls -l data/apps.desktop-entry-editor.gschema.xml || { echo "::error::Schema 'data/apps.desktop-entry-editor.gschema.xml' not found!"; exit 1; }
          ls -l data/desktop-entry-editor.desktop || { echo "::error::Desktop file 'data/desktop-entry-editor.desktop' not found!"; exit 1; }
          # Add check for python module init file - needs to exist for python plugin
          ls -l src/dee/__init__.py || { echo "::error::Python module __init__.py 'src/dee/__init__.py' not found!"; exit 1; }
          # Add check for icon file
          ls -l data/icons/hicolor/scalable/apps/desktop-entry-editor.svg || { echo "::error::Icon file 'data/icons/hicolor/scalable/apps/desktop-entry-editor.svg' not found!"; exit 1; }

          echo "Required build output files found."

      # --- Prepare AppDir for Bundling ---
      - name: Create AppDir Structure
        run: |
          mkdir -p AppDir/usr/lib # Create a base directory linuxdeploy plugins expect

      # --- Bundle Python Environment FIRST ---
      # This plugin should handle copying the necessary python code from src/dee
      - name: Bundle Python Environment
        env:
          APPDIR: ${{ github.workspace }}/AppDir
          # Point plugin to the directory containing the python module(s)
          # The plugin *should* detect the main script uses 'dee' and copy it.
          # Explicitly setting PYTHON_DIRS might be needed if auto-detection fails.
          # PYTHON_DIRS: ${{ github.workspace }}/src
        run: |
          echo "Running linuxdeploy-plugin-python..."
          # Ensure the module source directory exists
          if [ ! -d "${{ github.workspace }}/src/dee" ]; then
             echo "::error::Source python module directory '${{ github.workspace }}/src/dee' not found. Cannot run python plugin."
             exit 1
          fi
          # Execute the python plugin
          ./linuxdeploy-plugin-python --appdir $APPDIR

          # Verify python plugin worked (optional but recommended)
          echo "--- Verifying contents after Python plugin ---"
          find AppDir -name "__init__.py" -ls || echo "::warning::Python __init__.py not found in AppDir after plugin run."
          find AppDir -wholename "*/site-packages/dee" -ls || echo "::warning::Python module 'dee' directory not found in AppDir site-packages."

      # --- Determine AppImage Version ---
      - name: Determine AppImage Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "APP_VERSION=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            # Use a combination of latest tag and short commit hash for non-release builds
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
            SHORT_HASH=$(git rev-parse --short HEAD)
            echo "APP_VERSION=${LATEST_TAG}+git${SHORT_HASH}" >> $GITHUB_OUTPUT
          fi
          echo "AppImage Version set to: ${{ steps.version.outputs.APP_VERSION }}"

      # --- Bundle Libraries and Create AppImage ---
      - name: Bundle Libraries and Create AppImage (using GTK plugin)
        env:
          APPDIR: ${{ github.workspace }}/AppDir
          VERSION: ${{ steps.version.outputs.APP_VERSION }}
          # No need for DESKTOP_FILE/ICON_FILE env vars here, pass directly to linuxdeploy
        run: |
          echo "Downloading linuxdeploy-plugin-gtk script..."
          wget -c -nv "https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gtk/master/linuxdeploy-plugin-gtk.sh" -O linuxdeploy-plugin-gtk
          chmod +x linuxdeploy-plugin-gtk

          echo "Running main linuxdeploy command..."
          # No need to check files inside AppDir here, linuxdeploy will copy them

          # Run linuxdeploy, pointing to SOURCE files relative to CWD
          # It will copy them to the standard locations within AppDir
          # The GTK plugin should handle GSettings compilation automatically
          ./linuxdeploy --appdir $APPDIR \
            --executable src/desktop-entry-editor \
            --desktop-file data/desktop-entry-editor.desktop \
            --icon-file data/icons/hicolor/scalable/apps/desktop-entry-editor.svg \
            --deploy-deps-only data/apps.desktop-entry-editor.gschema.xml \
            --plugin gtk \
            --output appimage

      # --- Upload Artifacts ---
      - name: Prepare Artifact Name
        id: artifact_info
        run: |
          # Use the version determined earlier for a consistent name
          ARTIFACT_FILENAME="Desktop-Entry-Editor-${{ steps.version.outputs.APP_VERSION }}-x86_64.AppImage"
          echo "Expected Artifact Filename: $ARTIFACT_FILENAME"
          # Find the generated AppImage (linuxdeploy uses a default naming scheme if not overridden)
          # Default name format is often <AppName>-<Version>-<Arch>.AppImage
          # Let's find any AppImage starting with Desktop-Entry-Editor
          GENERATED_APPIMAGE=$(find . -maxdepth 1 -name 'Desktop-Entry-Editor*.AppImage' -print -quit)
          if [[ -z "$GENERATED_APPIMAGE" ]]; then
            echo "::error::Could not find generated AppImage file matching 'Desktop-Entry-Editor*.AppImage' after linuxdeploy!"
            ls -l *.AppImage || echo "No .AppImage files found in current directory."
            exit 1
          fi
          echo "Found generated AppImage: $GENERATED_APPIMAGE"
          # Ensure the generated file is moved to the desired artifact name
          if [[ "$GENERATED_APPIMAGE" != "$ARTIFACT_FILENAME" ]]; then
             echo "Renaming '$GENERATED_APPIMAGE' to '$ARTIFACT_FILENAME'"
             mv "$GENERATED_APPIMAGE" "$ARTIFACT_FILENAME"
          fi
          # Set the output for subsequent steps
          echo "FILENAME=$ARTIFACT_FILENAME" >> $GITHUB_OUTPUT

      - name: Upload AppImage as Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Desktop-Entry-Editor-AppImage # Keep artifact name generic unless needed otherwise
          path: ${{ steps.artifact_info.outputs.FILENAME }}

      # --- Upload to Release ---
      - name: Upload AppImage to Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.artifact_info.outputs.FILENAME }}
          asset_name: ${{ steps.artifact_info.outputs.FILENAME }}
          asset_content_type: application/vnd.appimage
