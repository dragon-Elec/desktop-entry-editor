# .github/workflows/build-appimage.yml

name: Build AppImage

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ "main" ] # Or your default branch (e.g., master)

  # Triggers the workflow when a release is published
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # Use a supported LTS Ubuntu version
    runs-on: ubuntu-22.04 # <-- Updated runner version

    steps:
      #----------------------------------------------
      # Checkout Code
      #----------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      #----------------------------------------------
      # Set up Build Environment
      #----------------------------------------------
      - name: Install Dependencies
        run: |
          sudo apt-get update -q
          # Package names are generally the same between 20.04 and 22.04 for these deps
          sudo apt-get install -y --no-install-recommends \
            git \
            build-essential \
            autoconf \
            automake \
            libtool \
            pkg-config \
            intltool \
            gettext \
            python3 \
            python3-pip \
            python3-gi \
            gir1.2-gtk-3.0 \
            gir1.2-gtksource-3.0 \
            python3-xdg \
            libgtk-3-dev \
            libgtksourceview-3.0-dev \
            libglib2.0-dev \
            wget

      - name: Install AppImage Tools (linuxdeploy + python plugin)
        run: |
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage" -O linuxdeploy
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy-plugin-python/releases/download/continuous/linuxdeploy-plugin-python-x86_64.AppImage" -O linuxdeploy-plugin-python
          chmod +x linuxdeploy linuxdeploy-plugin-python

      #----------------------------------------------
      # Build Desktop Entry Editor
      #----------------------------------------------
      - name: Prepare Autotools
        run: |
          aclocal -I m4
          # Use --force --copy to avoid issues with potentially missing files in repo vs. system
          intltoolize --force --copy
          autoconf
          automake --add-missing --copy --force-missing

      - name: Configure Build
        run: |
          # Install into /usr within the AppDir for standard paths
          ./configure --prefix=/usr

      - name: Make Build
        run: |
          make

      #----------------------------------------------
      # Prepare AppDir
      #----------------------------------------------
      - name: Create AppDir and Install
        run: |
          make install DESTDIR=AppDir

      #----------------------------------------------
      # Bundle Dependencies
      #----------------------------------------------
      - name: Bundle Python Environment
        env:
          APPDIR: ${{ github.workspace }}/AppDir
        run: |
          ./linuxdeploy-plugin-python --appdir $APPDIR

      - name: Compile GSettings Schema
        run: |
          # Ensure the compiled schema is inside the AppDir
          glib-compile-schemas AppDir/usr/share/glib-2.0/schemas/

      #----------------------------------------------
      # Create AppImage
      #----------------------------------------------
      - name: Determine AppImage Version
        id: version
        run: |
          # Use release tag name if triggered by release, otherwise use short commit hash
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "APP_VERSION=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "APP_VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Bundle Libraries and Create AppImage
        env:
          APPDIR: ${{ github.workspace }}/AppDir
          # Set version for linuxdeploy output
          VERSION: ${{ steps.version.outputs.APP_VERSION }}
        run: |
          # Note: The main executable is the Python script generated by autotools
          ./linuxdeploy --appdir $APPDIR \
            --executable $APPDIR/usr/bin/desktop-entry-editor \
            --desktop-file $APPDIR/usr/share/applications/desktop-entry-editor.desktop \
            --icon-file $APPDIR/usr/share/icons/hicolor/scalable/apps/desktop-entry-editor.svg \
            --output appimage

      #----------------------------------------------
      # Upload Artifacts
      #----------------------------------------------
      - name: Prepare Artifact Name
        id: artifact_name
        run: |
          # Consistent naming convention
          ARTIFACT_FILENAME="Desktop-Entry-Editor-${{ steps.version.outputs.APP_VERSION }}-x86_64.AppImage"
          echo "FILENAME=$ARTIFACT_FILENAME" >> $GITHUB_OUTPUT
          # Find the actual generated file (linuxdeploy adds version automatically if VERSION env var is set)
          GENERATED_APPIMAGE=$(find . -maxdepth 1 -name 'Desktop_Entry_Editor*.AppImage' -print -quit)
          if [[ -z "$GENERATED_APPIMAGE" ]]; then
            echo "::error::Could not find generated AppImage file!"
            exit 1
          fi
          echo "GENERATED_FILE=$GENERATED_APPIMAGE" >> $GITHUB_OUTPUT
          # Rename for consistency before uploading
          mv "$GENERATED_APPIMAGE" "$ARTIFACT_FILENAME"


      - name: Upload AppImage as Build Artifact
        uses: actions/upload-artifact@v3 # Using v3 explicitly
        with:
          name: Desktop-Entry-Editor-AppImage
          path: ${{ steps.artifact_name.outputs.FILENAME }} # Correct path to the renamed file

      #----------------------------------------------
      # Upload to Release (Only if triggered by release)
      #----------------------------------------------
      - name: Upload AppImage to Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.artifact_name.outputs.FILENAME }} # Correct path to the renamed file
          asset_name: ${{ steps.artifact_name.outputs.FILENAME }}
          asset_content_type: application/vnd.appimage
