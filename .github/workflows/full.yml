# .github/workflows/build-appimage.yml

name: Build AppImage

on:
  push:
    branches: [ "main" ]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # --- Checkout Code ---
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Install Dependencies ---
      - name: Install Dependencies (including libfuse2)
        run: |
          sudo apt-get update -q
          sudo apt-get install -y --no-install-recommends \
            git build-essential autoconf automake libtool pkg-config \
            intltool gettext python3 python3-pip python3-gi \
            python3-gi-cairo gir1.2-gtk-3.0 gir1.2-gtksource-3.0 \
            python3-xdg libgtk-3-dev libgtksourceview-3.0-dev \
            libglib2.0-dev wget libfuse2 desktop-file-utils # Added desktop-file-utils

      # --- Download Core AppImage Tools ---
      - name: Install Core AppImage Tools (linuxdeploy + python plugin)
        run: |
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage" -O linuxdeploy
          wget -c -nv "https://github.com/niess/linuxdeploy-plugin-python/releases/download/continuous/linuxdeploy-plugin-python-x86_64.AppImage" -O linuxdeploy-plugin-python
          chmod +x linuxdeploy linuxdeploy-plugin-python

      # --- Build Desktop Entry Editor ---
      - name: Prepare Autotools
        run: |
          aclocal -I m4
          intltoolize --force --copy
          autoconf
          # Add verbose flag to automake
          automake --add-missing --copy --force-missing -v
      - name: Configure Build
        run: |
          ./configure --prefix=/usr
      - name: Make Build
        run: |
          # Add V=1 for verbose make output
          make V=1

      # --- VERIFY BUILD OUTPUTS ---
      - name: Verify Files Before Install
        run: |
          echo "--- Checking for files generated by 'make' ---"
          ls -l src/desktop-entry-editor || echo "::error::Executable script 'src/desktop-entry-editor' not found after make!"
          ls -l data/apps.desktop-entry-editor.gschema.xml || echo "::error::Schema 'data/apps.desktop-entry-editor.gschema.xml' not found!"
          ls -l data/desktop-entry-editor.desktop || echo "::error::Desktop file 'data/desktop-entry-editor.desktop' not found!"

          # If any critical file is missing, fail early
          if ! [ -f src/desktop-entry-editor ] || ! [ -f data/apps.desktop-entry-editor.gschema.xml ] || ! [ -f data/desktop-entry-editor.desktop ]; then
             echo "::error::One or more required files were not generated by 'make'. Cannot proceed to install."
             exit 1
          fi
          echo "Required files found."

      # --- Prepare AppDir and Install with Immediate Verification ---  <- MODIFIED STEP
      - name: Create AppDir and Install
        run: |
          echo "Creating AppDir..."
          mkdir -p AppDir
          echo "Running make install..."
          # Add V=1 for verbose install output, and check exit code explicitly
          # Also note: the install hook runs update-desktop-database which might not be installed in the minimal container
          # Adding || true temporarily to ignore failure there, though installing desktop-file-utils is better.
          if ! make install DESTDIR=AppDir V=1; then
            echo "::warning::'make install' command potentially failed (check logs). If the only error is 'update-desktop-database: command not found', it might be okay. Continuing verification..."
            # Don't exit immediately, let verification below decide
          fi
          echo "'make install' completed (or ignored specific hook errors)."
          echo "--- Verifying contents immediately after make install ---"
          echo "Listing full AppDir structure:"
          find AppDir -ls # Use find for a recursive view
          echo "Checking specifically for executable:"
          ls -l AppDir/usr/bin/desktop-entry-editor || echo "::error::Executable still missing after install!"
          echo "Checking specifically for schema:"
          ls -l AppDir/usr/share/glib-2.0/schemas/apps.desktop-entry-editor.gschema.xml || echo "::error::Schema still missing after install!"
          # Add a final check to ensure the crucial executable exists before proceeding
          if ! [ -f AppDir/usr/bin/desktop-entry-editor ]; then
              echo "::error::Executable verification failed immediately after install. Aborting."
              exit 1
          fi
          echo "Immediate verification successful."

      # --- Verify Installation Paths --- (Commented out as verification is now immediate)
      # - name: Verify Installation Paths
      #   run: |
      #     echo "--- Verifying AppDir structure (separate step) ---"
      #     find AppDir -ls
      #     echo "--- Specifically checking for executable ---"
      #     ls -l AppDir/usr/bin/desktop-entry-editor || echo "::warning::Executable NOT FOUND at AppDir/usr/bin/desktop-entry-editor (separate step check)"
      #     echo "--- Specifically checking for GSettings schema ---"
      #     ls -l AppDir/usr/share/glib-2.0/schemas/apps.desktop-entry-editor.gschema.xml || echo "::warning::GSettings schema NOT FOUND at AppDir/usr/share/glib-2.0/schemas/ (separate step check)"
      #     if ! [ -f AppDir/usr/bin/desktop-entry-editor ]; then
      #         echo "::error::Executable not found in AppDir/usr/bin (separate step check). Something is wrong with 'make install'."
      #         exit 1
      #     fi

      # --- Bundle Dependencies ---
      - name: Bundle Python Environment
        env:
          APPDIR: ${{ github.workspace }}/AppDir
        run: |
          ./linuxdeploy-plugin-python --appdir $APPDIR

      - name: Compile GSettings Schema
        run: |
          SCHEMA_DIR="AppDir/usr/share/glib-2.0/schemas"
          if [ -f "$SCHEMA_DIR/apps.desktop-entry-editor.gschema.xml" ]; then
             echo "Compiling GSettings schemas in $SCHEMA_DIR..."
             # Ensure the directory exists before compiling
             mkdir -p "$SCHEMA_DIR"
             # Need to run this inside the AppDir context potentially, or ensure the host has it
             # Try running directly first, as AppRun is not set up yet.
             if command -v glib-compile-schemas &> /dev/null; then
               glib-compile-schemas "$SCHEMA_DIR/"
               echo "Schema compilation command executed."
             else
               echo "::warning::glib-compile-schemas command not found on host. Cannot compile schemas at this stage."
             fi
          else
             echo "::warning::GSettings schema file NOT FOUND at $SCHEMA_DIR/apps.desktop-entry-editor.gschema.xml. Skipping compilation."
          fi

      # --- Create AppImage ---
      - name: Determine AppImage Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "APP_VERSION=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "APP_VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi
          echo "AppImage Version set to: ${{ steps.version.outputs.APP_VERSION }}"

      - name: Bundle Libraries and Create AppImage (using GTK script plugin)
        env:
          APPDIR: ${{ github.workspace }}/AppDir
          VERSION: ${{ steps.version.outputs.APP_VERSION }}
          # Explicitly tell linuxdeploy where the desktop and icon files are relative to AppDir root
          DESKTOP_FILE: usr/share/applications/desktop-entry-editor.desktop
          ICON_FILE: usr/share/icons/hicolor/scalable/apps/desktop-entry-editor.svg
        run: |
          echo "Downloading linuxdeploy-plugin-gtk script..."
          wget -c -nv "https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gtk/master/linuxdeploy-plugin-gtk.sh" -O linuxdeploy-plugin-gtk
          chmod +x linuxdeploy-plugin-gtk
          echo "Running linuxdeploy with plugins..."
          # Ensure desktop file and icon file exist before running linuxdeploy
          if ! [ -f "$APPDIR/$DESKTOP_FILE" ]; then
            echo "::error::Desktop file missing at $APPDIR/$DESKTOP_FILE before running linuxdeploy!"
            find AppDir -name "*.desktop" -ls # Show where desktop files might be
            exit 1
          fi
          if ! [ -f "$APPDIR/$ICON_FILE" ]; then
            echo "::error::Icon file missing at $APPDIR/$ICON_FILE before running linuxdeploy!"
            find AppDir -name "*.svg" -ls # Show where svg files might be
            exit 1
          fi

          ./linuxdeploy --appdir $APPDIR \
            --executable usr/bin/desktop-entry-editor \
            --desktop-file "$DESKTOP_FILE" \
            --icon-file "$ICON_FILE" \
            --plugin gtk \
            --output appimage

      # --- Upload Artifacts ---
      - name: Prepare Artifact Name
        id: artifact_info
        run: |
          ARTIFACT_FILENAME="Desktop-Entry-Editor-${{ steps.version.outputs.APP_VERSION }}-x86_64.AppImage"
          echo "FILENAME=$ARTIFACT_FILENAME" >> $GITHUB_OUTPUT
          GENERATED_APPIMAGE=$(find . -maxdepth 1 -name 'Desktop*.AppImage' -print -quit)
          if [[ -z "$GENERATED_APPIMAGE" ]]; then
            echo "::error::Could not find generated AppImage file after linuxdeploy!"
            exit 1
          fi
          echo "Found generated AppImage: $GENERATED_APPIMAGE"
          mv "$GENERATED_APPIMAGE" "$ARTIFACT_FILENAME"
          echo "Renamed to: $ARTIFACT_FILENAME"

      - name: Upload AppImage as Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Desktop-Entry-Editor-AppImage
          path: ${{ steps.artifact_info.outputs.FILENAME }}

      # --- Upload to Release ---
      - name: Upload AppImage to Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.artifact_info.outputs.FILENAME }}
          asset_name: ${{ steps.artifact_info.outputs.FILENAME }}
          asset_content_type: application/vnd.appimage
